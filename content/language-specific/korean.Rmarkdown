
---
title: Korean
weight: 20
draft: false
---

{{% author %}}By Oul Han{{% /author %}} 

```{r, message=FALSE}
require(quanteda)
require(quanteda.corpora)
require(KoNLP)
```

## Tokenization

You can use `tokens()` or a morphological analysis tool such as [KoNLP](https://cran.r-project.org/web/packages/KoNLP/index.html) to tokenize Korean texts. The sample corpus contains all 17 transcripts of commencement speeches by Korean presidents from 1948 to 2008. 

```{r, eval=FALSE}
corp <- download(url = "https://www.dropbox.com/s/1cluzpgjjje9icd/data_corpus_korean-presidential-speeches.RDS?dl=1")
txt <- tail(texts(corp), 1000)
```

```{r include=FALSE}
# This code is only for website generation
corp <- readRDS("/home/kohei/Dropbox/Public/data_corpus_korean-presidential-speeches.RDS")
txt <- tail(texts(corp), 1000)
```

### Rule-based boundary detection

`tokens()` can segment Korean texts in the same way as English texts based on white spaces, but cannot slice off many morphemes that are not necessary for text analysis. However, you may find that `tokens()` suffices, especially if supplemented with stop words that you tailor for the corpus in question.

```{r}
icu_toks <- tokens(txt)
head(icu_toks[[10]], 50)
```

### Morphological analysis 

If you want to perform more accurate tokenization, you need to install a morphological analysis tool, and call it from R. [KoNLP](https://cran.r-project.org/web/packages/KoNLP/index.html) is one of the most popular morphological analysis tools for Korean texts. Using **KoNLP**'s *nour extraction* function, we can remove grammatical letters in a similar manner as lemmatization in English.

```{r include=FALSE}
# This code is only for website generation
konlp_toks <- readRDS("/home/kohei/Dropbox/Public/data_list_korean-presidential-speeches.RDS")
```

```{r, eval=FALSE}
konlp_toks <- extractNoun(txt)
```

```{r}
head(konlp_toks[[10]], 50)
```

## Stop words

As you can see above, the results are better. However, the results include morphemes that are legit within Korean syntax, but almost completely meaningless for the purpose of content analysis (such as "한" or "바"). This is where stop words act as additional filter, which you can write down as a list then call from quanteda. There is no standard list of stop words for Korean, which may be something to work on in the future. For now, you should create your own by identifying and filtering words step by step that have passed through the above described methods. 

Lastly, `tokens(remove_punct = TRUE)` is quanteda's standard command for removing punctuations, which might not be necessary if you've used KoNLP's `extractNoun()`.

