---
title: Newsmap
weight: 60
draft: false
---

Newsmap is a semi-supervised model for geographical document classification. While (full) supervised models are trained on manually classified data, this semi-supervised model learns from "seed words" in dictionaries. 

Install the **newsmap** package from CRAN.

```{r eval=FALSE}
install.packages("newsmap")
```

```{r message=FALSE}
require(quanteda)
require(quanteda.corpora)
require(newsmap)
require(maps)
require(ggplot2)
```

Download a corpus with news articles using **quanteda.corpora**'s `download()` function.

```{r eval=FALSE}
rss_corp <- download(url = 'https://www.dropbox.com/s/r8zhsu8zvjzhnml/data_corpus_yahoonews.rds?dl=1')
```

```{r include=FALSE}
# This code is only for website generation
rss_corp <- readRDS("../data/data_corpus_yahoonews.rds")
```

`rss_corp` contains 10,000 news summaries downloaded from Yahoo News in 2014.

```{r}
ndoc(rss_corp)
range(docvars(rss_corp, "date"))
```

In geographical classification, proper nouns are the most useful features of documents, but not all capitalized words are proper nouns, so we define custom stopwords.

```{r}
month <- c('January', 'February', 'March', 'April', 'May', 'June',
           'July', 'August', 'September', 'October', 'November', 'December')
day <- c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')
agency <- c('AP', 'AFP', 'Reuters')
```

```{r}
toks <- tokens(rss_corp)
toks <- tokens_remove(toks, pattern = stopwords('english'), valuetype = 'fixed', padding = TRUE)
toks <- tokens_remove(toks, pattern = c(month, day, agency), valuetype = 'fixed', padding = TRUE)
```

**newsmap** contains [seed geographical dictionaries](https://github.com/koheiw/newsmap/tree/master/dict) in English, German, Spanish, Japanese and Russian languages. `data_dictionary_newsmap_en` is the seed dictionary for English texts.

```{r}
label_toks <- tokens_lookup(toks, dictionary = data_dictionary_newsmap_en, levels = 3) # level 3 is countries
label_dfm <- dfm(label_toks, tolower = FALSE)

feat_dfm <- dfm(toks, tolower = FALSE)
feat_dfm <- dfm_select(feat_dfm, pattern = "^[A-Z][A-Za-z1-2]+", valuetype = 'regex', case_insensitive = FALSE)
feat_dfm <- dfm_trim(feat_dfm, min_termfreq = 10)

model <- textmodel_newsmap(feat_dfm, y = label_dfm)
```

The seed dictionary contains only names of countries and capital cities, but the model additional extracts features associated to the countries. These country codes are defined in [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).

```{r}
coef(model, n = 10)[c("US", "GB", "FR", "BR", "JP")]
```

{{% notice tip %}}
Names of people, organizations and places are often multi-word expressions. To distiguish between "New York" and "York", for example, it is useful to compound tokens using `tokens_compound()` as explained in [Advanced Operations](../advanced-operations/compound-mutiword-expressions/).
{{% /notice %}}

You can predict the most strongly associated countries using `predict()` and count the frequency using `table()`. 

```{r}
pred <- predict(model)
head(pred, 20)
```

Factor levels are set to obtain zero counts for countries that did not appear in the corpus.

```{r}
count <- sort(table(factor(pred, levels = colnames(label_dfm))), decreasing = TRUE)
head(count, 20)
```

You can visualize the distribution of global news attention using `geom_map()`.

```{r fig.height=5, fig.width=10}

data_country <- as.data.frame(count, stringsAsFactors = FALSE)
colnames(data_country) <- c("id", "frequency")

world_map <- map_data(map = "world")
world_map$region <- iso.alpha(world_map$region) # convert contry name to ISO code

ggplot(data_country, aes(map_id = id)) +
      geom_map(aes(fill = frequency), map = world_map) +
      expand_limits(x = world_map$long, y = world_map$lat) +
      scale_fill_continuous(name = "Frequency") +
      theme_void() +
      coord_fixed()
      
```

{{% notice info %}}
If you want to learn more about Newsmap, see:  
Watanabe, Kohei. 2018. "Newsmap: A semi-supervised approach to geographical news classification." _Digital Journalism_ 6(3): 294-309.
{{% /notice %}}
