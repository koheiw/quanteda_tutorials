---
title: Targeted dictionary analysis
weight: 30
draft: false
---

```{r message=FALSE}
require(quanteda)
require(lubridate)
```

This corpus contains 6,000 Guardian news articles from 2012 to 2016.

```{r eval=FALSE}
corp_news <- download('data_corpus_guardian')
```

```{r include=FALSE}
# This code is only for website generation
corp_news <- readRDS("../data/data_corpus_guardian.rds")
```

```{r}
docvars(corp_news, 'year') <- year(docvars(corp_news, 'date'))
docvars(corp_news, 'month') <- month(docvars(corp_news, 'date'))
docvars(corp_news, 'week') <- week(docvars(corp_news, 'date'))

corp_news <- corpus_subset(corp_news, 'year' >= 2016)
toks_news <- tokens(corp_news, remove_punct = TRUE)
```

You can use `tokens_lookup()` or `dfm_looup()` to count dictionary values. **quanteda** contains Lexicoder Sentiment Dictionary created by Young and Soroka, so you can perfrom sentiment analysis of English texts right away.

```{r}
lengths(data_dictionary_LSD2015)

toks_news_lsd <- tokens_lookup(toks_news, dictionary =  data_dictionary_LSD2015[1:2])
head(toks_news_lsd, 2)

dfmat_news_lsd <- dfm(toks_news_lsd)
head(dfmat_news_lsd, 2)
```

## Targeted analysis

You can use `tokens_select()` with `window` argument to perform more targeted sentiment analysis.

### European Union

```{r}
eu <- c('EU', 'europ*', 'european union')
toks_eu <- tokens_keep(toks_news, pattern = phrase(eu), window = 10)
dfmat_eu_lsd <- dfm(toks_eu, dictionary = data_dictionary_LSD2015[1:2]) %>% 
    dfm_group(group = 'week', fill = TRUE) 

matplot(dfmat_eu_lsd, type = 'l', xaxt = 'n', lty = 1, ylab = 'Frequency')
grid()
axis(1, seq_len(ndoc(dfmat_eu_lsd)), ymd("2016-01-01") + weeks(seq_len(ndoc(dfmat_eu_lsd)) - 1))
legend('topleft', col = 1:2, legend = c('Negative', 'Positive'), lty = 1, bg = 'white')
```

```{r}
eu_n <- ntoken(dfm(toks_eu, group = docvars(toks_eu, 'week')))
plot((dfmat_eu_lsd[,2] - dfmat_eu_lsd[,1]) / eu_n, 
     type = 'l', ylab = 'Sentiment', xlab = '', xaxt = 'n')
axis(1, seq_len(ndoc(dfmat_eu_lsd)), ymd("2016-01-01") + weeks(seq_len(ndoc(dfmat_eu_lsd)) - 1))
grid()
abline(h = 0, lty = 2)
```

### Immigration

```{r}
immig <- c('immig*', 'migra*')
toks_immig <- tokens_keep(toks_news, pattern = phrase(immig), window = 10)
dfm_immig_lsd <- dfm(toks_immig, dictionary = data_dictionary_LSD2015[1:2]) %>% 
    dfm_group(group = 'week', fill = TRUE) 

matplot(dfm_immig_lsd, type = 'l', xaxt = 'n', lty = 1, ylab = 'Frequency')
grid()
axis(1, seq_len(ndoc(dfm_immig_lsd)), ymd("2016-01-01") + weeks(seq_len(ndoc(dfm_immig_lsd)) - 1))
legend('topleft', col = 1:2, legend = c('Negative', 'Positive'), lty = 1, bg = 'white')
```

```{r}
immig_n <- ntoken(dfm(toks_immig, group = docvars(toks_immig, 'week')))
plot((dfm_immig_lsd[,2] - dfm_immig_lsd[,1]) / immig_n, 
     type = 'l', ylab = 'Sentiment', xlab = '', xaxt = 'n')
axis(1, seq_len(ndoc(dfm_immig_lsd)), ymd("2016-01-01") + weeks(seq_len(ndoc(dfm_immig_lsd)) - 1))
grid()
abline(h = 0, lty = 2)
```

