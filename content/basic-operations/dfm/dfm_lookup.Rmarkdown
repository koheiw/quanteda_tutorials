---
title: Look up dictionary
weight: 30
draft: false
---

```{r message=FALSE}
require(quanteda)
```

[laver-garry.cat](https://raw.githubusercontent.com/quanteda/tutorials.quanteda.io/master/content/dictionary/laver-garry.cat) is a Wordstat dictionary that contain political left-right ideology keywords (Laver and Garry 2000). 

```{r eval=FALSE}
dict_lg <- dictionary(file = "content/dictionary/laver-garry.cat")
```

```{r include=FALSE}
# This code is only for website generation
dict_lg <- dictionary(file = "../../dictionary/laver-garry.cat")
```

`dfm_lookup()` translates dictionary values to keys in a DFM.

```{r}
toks_irish <- dfm(data_corpus_irishbudget2010, remove_punct = TRUE)
dfmat_irish <- dfm(toks_irish)
dfmat_irish_lg <- dfm_lookup(dfmat_irish, dictionary = dict_lg)
head(dfmat_irish_lg)
```

You can also pass a dictionary to `dfm()` to simplify your code. Therefore, the code above and below are equivalent.

```{r eval=FALSE}
dfmat_irish_lg <- dfm(data_corpus_irishbudget2010, dictionary = dict_lg, remove_punct = TRUE)
```

{{% notice note %}}
`dfm_lookup()` cannot find multi-word expressions since a document-feature matrix does not store information about positions of words. Yet, `dfm()` can handle multi-word expressions because dictionary lookup is performed internally on tokens using `tokens_lookup()`. Afterwards, you can create a document-feature matrix from this object.
{{% /notice %}}

